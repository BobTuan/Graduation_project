import numpy as np
import tensorflow as tf

dim = 4096
hidden_dim = 600
F_pie_t = 8
F_pie_c = 8

num_task = 4
num_class = 10

input_hidden_weights = tf.Variable(tf.truncated_normal([dim, hidden_dim], dtype=tf.float32, stddev=1e-1), name='input_hidden_weights')

hidden_output_weight = tf.Variable(tf.truncated_normal(
        [num_task, hidden_dim + F_pie_t + F_pie_c, num_class], dtype=tf.float32, stddev=1e-1), name='hidden_output_weight')

task_embedding_vectors = [[-0.02005451, -0.00732977, -0.00771832, 0.07460019, 0.18319537, -0.06416448, 0.02614096, -0.09231532], 
                          [-0.02005451, -0.00732977, -0.00771832, 0.07460019, 0.18319537, -0.06416448, 0.02614096, -0.09231532], 
                          [-0.02005451, -0.00732977, -0.00771832, 0.07460019, 0.18319537, -0.06416448, 0.02614096, -0.09231532], 
                          [-0.02005451, -0.00732977, -0.00771832, 0.07460019, 0.18319537, -0.06416448, 0.02614096, -0.09231532]]

class_embedding_vectors = [[0.00031212, -0.00241538, -0.00065134, -0.00765207, -0.00472577, 0.0042992, 0.00528456, 0.00225991], 
                           [0.0003121, -0.00241529, -0.00065131, -0.00765177, -0.00472558, 0.00429903, 0.00528435, 0.00225982], 
                           [0.00031211, -0.00241537, -0.00065134, -0.00765203, -0.00472574, 0.00429918, 0.00528454, 0.0022599], 
                           [0.00031212, -0.00241538, -0.00065134, -0.00765207, -0.00472577, 0.0042992, 0.00528456, 0.00225991], 
                           [0.00031211, -0.00241536, -0.00065133, -0.007652, -0.00472573, 0.00429916, 0.00528451, 0.00225989], 
                           [0.00031211, -0.00241537, -0.00065134, -0.00765203, -0.00472574, 0.00429918, 0.00528453, 0.0022599], 
                           [0.00031211, -0.00241537, -0.00065134, -0.00765204, -0.00472575, 0.00429918, 0.00528454, 0.0022599], 
                           [0.00031211, -0.00241538, -0.00065134, -0.00765206, -0.00472576, 0.0042992, 0.00528456, 0.00225991], 
                           [0.00031212, -0.00241539, -0.00065134, -0.00765209, -0.00472578, 0.00429921, 0.00528457, 0.00225992], 
                           [0.00031211, -0.00241538, -0.00065134, -0.00765205, -0.00472576, 0.00429919, 0.00528455, 0.00225991], 
                           [0.00031211, -0.00241538, -0.00065134, -0.00765206, -0.00472576, 0.00429919, 0.00528456, 0.00225991], 
                           [0.00031212, -0.00241539, -0.00065134, -0.00765209, -0.00472578, 0.00429921, 0.00528457, 0.00225992], 
                           [0.00031211, -0.00241536, -0.00065133, -0.00765201, -0.00472573, 0.00429916, 0.00528452, 0.00225989], 
                           [0.00031211, -0.00241537, -0.00065133, -0.00765202, -0.00472573, 0.00429917, 0.00528452, 0.0022599],
                           [0.00031211, -0.00241536, -0.00065133, -0.007652, -0.00472573, 0.00429916, 0.00528451, 0.00225989], 
                           [0.00031211, -0.00241536, -0.00065133, -0.007652, -0.00472572, 0.00429916, 0.00528451, 0.00225989], 
                           [0.00031211, -0.00241537, -0.00065133, -0.00765201, -0.00472573, 0.00429917, 0.00528452, 0.00225989], 
                           [0.00031211, -0.00241538, -0.00065134, -0.00765205, -0.00472575, 0.00429918, 0.00528454, 0.0022599], 
                           [0.00031211, -0.00241538, -0.00065134, -0.00765206, -0.00472576, 0.0042992, 0.00528456, 0.00225991],
                           [0.00031212, -0.00241538, -0.00065134, -0.00765207, -0.00472577, 0.0042992, 0.00528456, 0.00225991],
                           [0.0003121, -0.00241523, -0.0006513, -0.0076516, -0.00472547, 0.00429893, 0.00528423, 0.00225977],
                           [0.00031209, -0.00241521, -0.00065129, -0.00765153, -0.00472543, 0.0042989, 0.00528418, 0.00225975],
                           [0.00031211, -0.00241536, -0.00065133, -0.00765199, -0.00472572, 0.00429916, 0.00528451, 0.00225989],
                           [0.0003121, -0.00241523, -0.0006513, -0.00765159, -0.00472547, 0.00429893, 0.00528423, 0.00225977],
                           [0.00031211, -0.00241534, -0.00065133, -0.00765193, -0.00472568, 0.00429912, 0.00528446, 0.00225987],
                           [0.00031211, -0.00241536, -0.00065133, -0.007652, -0.00472572, 0.00429916, 0.00528451, 0.00225989],
                           [0.00031211, -0.00241533, -0.00065132, -0.00765191, -0.00472566, 0.00429911, 0.00528445, 0.00225986],
                           [0.0003121, -0.00241529, -0.00065131, -0.00765178, -0.00472558, 0.00429904, 0.00528436, 0.00225983],
                           [0.00031208, -0.00241513, -0.00065127, -0.00765126, -0.00472526, 0.00429874, 0.005284, 0.00225967],
                           [0.00031211, -0.00241536, -0.00065133, -0.00765201, -0.00472573, 0.00429917, 0.00528452, 0.00225989],
                           [0.0003121, -0.00241527, -0.00065131, -0.00765172, -0.00472555, 0.00429901, 0.00528432, 0.00225981],
                           [0.0003121, -0.00241525, -0.0006513, -0.00765165, -0.0047255, 0.00429896, 0.00528427, 0.00225979],
                           [0.00031211, -0.00241538, -0.00065134, -0.00765205, -0.00472575, 0.00429919, 0.00528454, 0.0022599],
                           [0.0003121, -0.00241528, -0.00065131, -0.00765174, -0.00472556, 0.00429901, 0.00528433, 0.00225982],
                           [0.00031211, -0.00241535, -0.00065133, -0.00765197, -0.0047257, 0.00429914, 0.00528449, 0.00225988],
                           [0.00031211, -0.00241537, -0.00065133, -0.00765202, -0.00472574, 0.00429917, 0.00528453, 0.0022599],
                           [0.00031211, -0.00241537, -0.00065133, -0.00765202, -0.00472574, 0.00429917, 0.00528453, 0.0022599],
                           [0.00031211, -0.00241535, -0.00065133, -0.00765195, -0.00472569, 0.00429913, 0.00528448, 0.00225988],
                           [0.00031209, -0.00241516, -0.00065128, -0.00765135, -0.00472532, 0.0042988, 0.00528406, 0.0022597],
                           [0.00031211, -0.00241538, -0.00065134, -0.00765205, -0.00472575, 0.00429919, 0.00528455, 0.00225991]]

saver = tf.train.Saver()
sess = tf.Session()
saver.restore(sess, "./model/model.ckpt")
input_hidden_weights = sess.run(input_hidden_weights)
hidden_output_weight = sess.run(hidden_output_weight)
np.set_printoptions(threshold=999999999, linewidth=999999999)
f = open('result.txt', 'r')
print('input_hidden_weights = ', input_hidden_weights)
print('hidden_output_weight = ', hidden_output_weight)
